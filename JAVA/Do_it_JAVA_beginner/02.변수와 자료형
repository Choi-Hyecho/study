2021 5월 24일 월요일

변수와 자료형

컴퓨터에서 데이터 표현하기

컴퓨터는 0과 1로만 데이터를 저장함.

bit : 컴퓨터가 표현하는 데이터의 최소 단위로 2진수 하나의 값을 저장할 수 있는 메모리의 크기이다.
0 혹은 1 -> on / off

byte : 1 byte = 8 bit

컴퓨터는 0과 1로 자료를 표현해서 따라서 숫자나 문자도 0과1의 조합으로 표현된다.

10진수는 10 마다 자릿수가 올라간다면 2는 2 마다 자릿수가 올라간다.

10진수                           2진수
0                               00000
1                               00001
2                               00010
3                               00011
4                               00100

10진수와 16진수
2진수로 숫자나 문자를 표현하다보면 길이가 길어지므로 8진수나 16진수를 사용하기도 한다.

10진수                            16진수
9                                   9
10                                  A
11                                  B
12                                  C
13                                  D
14                                  E
15                                  F
16                                  10

16단위로 자릿수가 올라감
사용하는 이유

2진수로 10을 표현하려면? 8+2 이므로
2의 3승 2의 1승 8비트에 이를 표현하려면
00001010 -> 0A
처럼 표현됨. 이렇게 표현하기에는 너무 길이가 길어지고 사용하기 어렵기 때문에 16진수의 필요성 나타남
0~15를 2진수로 표현하기 위해서는 4비트가 표현하고 이를 한번에 묶어서 16진수로 표현할 수 있다.
편의성을 위해 데이터를 표현할때 16비트를 사용한다.

그외의 8진수도 있는데 8진수를 표현하기 위해서는 3비트가 필요하다.

2진수 8진수 16진수 변환 코딩

BinaryTest.java <- 확인

그러면 음의 정수는 어떻게 표현할까?

정수의 가장 왼쪽에 존재하는 비트는 부호비트임.
맨 앞의 비트를 MSB( Most Singnificant Bit) 가장 중요한 비트라고 함.

음수를 만드는 방법은 2의 보수를 취한다.

맨 앞이 0일 경우 양수 1인 경우 음수를 뜻함.
각 자리수의 점수를 계산 하여야함.

두개를 더해서 0이 나와야 음수임.
그래서 보수를 만들어야함.

보수는 A+B 일때 A를 0이 되는 값을 보수라고 함.

2진수                           10진수
00000101                        5
10000101                        -5?
---------
두 수를 더했을 때 0이 아니므로 -5가 아님

보수를 구하는 법

1) 두 수를 더해서 다 1이 나오도록 함. -> 1의 보수를 만듦
2) 거기에 1을 다시 더해줌 -> 자릿수가 바뀌며 0만 남게 됨
  ===> 2의 보수를 만들기

예제 양수와 음수 더하기
BinaryTest2.java 확인

변수와 자료형(2)

변수 -> 변하는 수

ex) 사람의 나이, 게임의 레벨

프로그래밍에서 값을 사용하기 위해 선언하는 것을 변수라고 함.


프로그램에서 사용되는 자료를 저장하기 위한 공간
할당 받은 메모리의 주소 대신 부르는 이름
프로그램 실행 중에 값 변경 가능
사용되기 이전에 선언 되어야 함.

Java에서는 변수 명에 대해 특별한 제약은 없음 하지만

변수 선언 시 변수의 이름은 알파벳, 숫자, _, $ 로 구성된다.
대소문자를 구분한다.
변수의 이름은 숫자로 시작할 수 없고 키워드도 변수의 이름으로 사용할 수 없다.

이름 사이에 공백이 있을 수 없다.

변수의 이름을 정할 때는 변수의 역할에 어울리는, 의미 있는 이름을 지어야 한다.

-> 프로그래밍을 하다 보면 자연히 이해하게 됨.
Java 에서는 주로 카멜 케이스를 사용함.
선언 시 제일 중요한 것은 변수의 사용과 의미에 따라 가독성 있게 지어주는것이 중요함.


변수가 저장되는 공간의 특성 - 자료형


1바이트 - 정수형 (byte) , 논리형(boolean)
2바이트 - 정수형(short), 문자형(char)
4바이트 - 정수형(int), 실수형(float)
8바이트 - 정수형(long), 실수형(double)

-> 변수가 사용할 공간의 크기와 특성에 따라 자료형을 사용하여 변수를 사용한다.
같은 자료형 이라도 사용하는 바이트의 크기에 따라 다르게 나눌 수 있다.



byte와 short 

byte : 1바이트 단위의 자료형, 동영상, 음악 파일 등 실행 파일의 자료를 처리 할 때 사용하기 좋다. 

second/ByteVariable.java 코드 참고

short: 2바이트 단위의 자료형 주로 c/c++ 언어와의 호환시 사용 


int 

자바에서 사용하는 정수에 대한 기본 자료 형 
4바이트 단위의 자료 형 
프로그램에서 사용하는 모든 숫자(리터럴)은 기본적으로 int(4바이트)로 저장 됨 
32 비트를 초과하는 숫자는 long으로 처리해야하며 식별자도 추가해야함. 

long
8바이트 자료형 
가장 큰 정수의 자료형
숫자 뒤에 L 또는 l을 써서 long 형임을 표시해야함. 

ch03/VariableEx2.java 참고

char - 문자 자료형 

컴퓨터에서는 문자도 내부적으로 비트의 조합으로 표현
자바에서는 문자를 2바이트로 처리 
인코딩 - 각 문자에 따른 특정한 숫자 값을 부여 
디코딩 - 숫자 값을 원래의 문자로 변환 

문자세트 
문자세트 : 뭄자를 위한 코드 값 (숫자 값) 들을 정해 놓은 세트 
아스키(ASCII) : 1바이트로 영문자, 숫자, 특수문자 등을 표현 함 
유니코드 (Unicode) : 한글과 같은 복잡한 언어를 표현하기 위한 표준 인코딩 UTF-8, UTF-16이 대표적 
문자를 변수에 저장하면 그 문자에 해당하는 코드 값이 저장됨 
자바는 유니코드 UTF-16 인코딩 사용 

ch03/CharacterEx.java 참고

float, double - 실수 자료형 

부동 소수점 방식 : 실수를 지수부와 가수부로 표현함. 무한의 실수를 표현하기 위한 방식 

float는 4바이트 
double 은 8 바이트 


실수는 기본적으로 double으로 표현함 
float 형으로 사용할 경우 

ch03/VariableEx3.java 코드 잠고

boolean - 논리형 
논리값 ture(참), false(거짓) 을 표현하는 자료형 
boolean 으로 선언

ch03/BooleansEx.java 참고

자료형 없이 변수 사용하기 (자바 10)

자료형이 필요한 이유: 

변수를 선언할때 변수가 사용할 메모리 크기와 타입을 구분하기 위해 자료형을 사용 

지역변수 자료형 추론 (local variable type inference)
변수의 대입되는 값을 보고 컴파일러가 자료형을 추론 

var num = 10     -> int num =10 
var dnum = 10.0   -> double dNum = 10.0
var str ="hello" -> String str = "hello"

ch03/TestCom.java 코드 참고


상수

상수 : 변하지 않는 값 (cf 변수 : 변하는 값)
상수를 선언 : final 키워드 사용

final double PI = 3.14;
final int MAX_NUM = 100;

final로 선언된 상수는 다른 값을 대입할 수 없음.

프로그램 내에서 변경되지 않아야 하는 값을 상수로 선언 해 두고
변경되는 경우 선언된 값만 수정

ch04/Constant.java 참고

리터럴 (literal)

리터럴 : 프로그램에서 사용하는 모든 숫자, 값, 논리 값
    ex) 10, 3.14, 'A', true

                 상수   리터럴
    ex) final int PI = 3.14

리터럴에 해당되는 값은 특정 메모리 공간은 상수 풀(constant pool)에 있음
필요한 경우 상수 풀에서 가져와서 사용
상수 풀에 저장할 때 정수는 int 실수는 double로 저장
따라서 long이나 float 값으로 저장해야하는 경우 식별자 (L,l,F,f)를 명시해야함.

형 변환(type conversion)
자료형은 각각 사용하는 메모리 크기와 방식이 다름
서로 다른 자료형의 값이 대입되는 경우 형 변환이 일어 남
묵시적 형 변환 : 작은 수에서 큰 수로 / 덜 정밀한 수에서 더 정밀한 수로 대입되는 경우

ex) long num =3 -> int 값에서 long으로 자동 형 변환 (L,l을 명시하지 않아도 됨)

ch04/ImplicitTypeConversion.java 참고


명시적 형 변환 : 묵시적 형 변환의 반대의 경우
                변환되는 자료 형을 명시해야 함 자료의 손실이 발생할 수 있음
                ex) doubld dNum = 3.14
                    int num = (int)dNum <- 소수점 이하 유실 됨.


