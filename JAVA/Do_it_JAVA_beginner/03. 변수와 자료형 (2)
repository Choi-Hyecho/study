변수와 자료형(2)

변수 -> 변하는 수

ex) 사람의 나이, 게임의 레벨

프로그래밍에서 값을 사용하기 위해 선언하는 것을 변수라고 함.


프로그램에서 사용되는 자료를 저장하기 위한 공간
할당 받은 메모리의 주소 대신 부르는 이름
프로그램 실행 중에 값 변경 가능
사용되기 이전에 선언 되어야 함.

Java에서는 변수 명에 대해 특별한 제약은 없음 하지만

변수 선언 시 변수의 이름은 알파벳, 숫자, _, $ 로 구성된다.
대소문자를 구분한다.
변수의 이름은 숫자로 시작할 수 없고 키워드도 변수의 이름으로 사용할 수 없다.

이름 사이에 공백이 있을 수 없다.

변수의 이름을 정할 때는 변수의 역할에 어울리는, 의미 있는 이름을 지어야 한다.

-> 프로그래밍을 하다 보면 자연히 이해하게 됨.
Java 에서는 주로 카멜 케이스를 사용함.
선언 시 제일 중요한 것은 변수의 사용과 의미에 따라 가독성 있게 지어주는것이 중요함.


변수가 저장되는 공간의 특성 - 자료형


1바이트 - 정수형 (byte) , 논리형(boolean)
2바이트 - 정수형(short), 문자형(char)
4바이트 - 정수형(int), 실수형(float)
8바이트 - 정수형(long), 실수형(double)

-> 변수가 사용할 공간의 크기와 특성에 따라 자료형을 사용하여 변수를 사용한다.
같은 자료형 이라도 사용하는 바이트의 크기에 따라 다르게 나눌 수 있다.



byte와 short 

byte : 1바이트 단위의 자료형, 동영상, 음악 파일 등 실행 파일의 자료를 처리 할 때 사용하기 좋다. 

public class ByteVariable{
	public static void main(String[] args){
		byte bDate = -128;
		System.out.println(bData);
		
		// 바이트로 표현할 수 있는 단위가 아니기 때문에 error 발생 함. 
		// byte bDate2 = 128;
		//System.out.println(bData2);
	}
}

short: 2바이트 단위의 자료형 주로 c/c++ 언어와의 호환시 사용 


int 

자바에서 사용하는 정수에 대한 기본 자료 형 
4바이트 단위의 자료 형 
프로그램에서 사용하는 모든 숫자(리터럴)은 기본적으로 int(4바이트)로 저장 됨 
32 비트를 초과하는 숫자는 long으로 처리해야하며 식별자도 추가해야함. 

long
8바이트 자료형 
가장 큰 정수의 자료형
숫자 뒤에 L 또는 l을 써서 long 형임을 표시해야함. 

public class VariableEx2{
	public static void main(String[] args){
		// 어딘가에 10이라는 값이 저장되어있고 그 이름이 num임 
		int num = 10;
		// 자바에서 모든 정수는 4바이트로 저장함.  
		// 4 바이트 이상의 큰 수는 8 바이트인 long으로 저장해야함. 
		// 이때 자료형을 long으로 바꾸는 것만 아니라 숫자 끝에 식별자(L) 를 추가하여 
		// 컴퓨터에게 8바이트로 저장할 수 있게 알려줘야 함. 
		// 실수에서도 마찬가지

		long num = 12345657890000L;
	}
}

char - 문자 자료형 

컴퓨터에서는 문자도 내부적으로 비트의 조합으로 표현
자바에서는 문자를 2바이트로 처리 
인코딩 - 각 문자에 따른 특정한 숫자 값을 부여 
디코딩 - 숫자 값을 원래의 문자로 변환 

문자세트 
문자세트 : 뭄자를 위한 코드 값 (숫자 값) 들을 정해 놓은 세트 
아스키(ASCII) : 1바이트로 영문자, 숫자, 특수문자 등을 표현 함 
유니코드 (Unicode) : 한글과 같은 복잡한 언어를 표현하기 위한 표준 인코딩 UTF-8, UTF-16이 대표적 
문자를 변수에 저장하면 그 문자에 해당하는 코드 값이 저장됨 
자바는 유니코드 UTF-16 인코딩 사용 

public class CharacterEx{
	public static void main(String[] args){
		char ch = 'A';
		// A
		System.out.println(ch);
		// 65
		System.out.println((int)ch);

		
		ch = 66;
		//B
		System.out.println(ch);

		int ch2 =67
		//67
		System.out.println(ch);
		//C
		System.out.println((char)ch);
	}
}

float, double - 실수 자료형 

부동 소수점 방식 : 실수를 지수부와 가수부로 표현함. 무한의 실수를 표현하기 위한 방식 

float는 4바이트 
double 은 8 바이트 


실수는 기본적으로 double으로 표현함 
float 형으로 사용할 경우 

public class VariableEx2{
	public static void main(String[] args){
		double dNum = 3.14;
		// float fNum = 3.14; 오류 발생 
		float fNum = 3.14F;
	}
}

boolean - 논리형 
논리값 ture(참), false(거짓) 을 표현하는 자료형 
boolean 으로 선언

public class BooleansEx{
	public static void main(String[] args){
		// boolean 자료형의 변수를 선언하고 초기화
		boolean isStudent = true;
		//true
		System.out.println(isStudent);
	}
}

자료형 없이 변수 사용하기 (자바 10)

자료형이 필요한 이유: 

변수를 선언할때 변수가 사용할 메모리 크기와 타입을 구분하기 위해 자료형을 사용 

지역변수 자료형 추론 (local variable type inference)
변수의 대입되는 값을 보고 컴파일러가 자료형을 추론 

var num = 10     -> int num =10 
var dnum = 10.0   -> double dNum = 10.0
var str ="hello" -> String str = "hello"

public class TestCom{

	// 대입되는 값이 없는 변수를 사용할 경우 var를 사용할 수 없음 
	int abc;
	public static void main(String[] args){
		var dNum = 3.14;
		flast fNum = 3.14F;
		System.out.println(dNum);

		var num = 10;
		System.out.println(num);
	}
}
