항과 연산자 

항(operand) : 연산에 사용되는 값
연산자(operator) : 항을 이용하여 연산하는 기호

변수를 사용함.

항의 개수에 따른 연산자 구분 
연산자
단항 연산자 / 항이 한개인 연산자 / ++num
이항 연산자 / 항이 두개인 연산자 / num1+num2
삼항 연산자 / 항이 세개인 연산자 / (5>3)? 1:0

대입 연산자
변수에 값을 대입하는 연산자 
연산의 결과를 변수에 대입
우선 순위가 가장 낮은 연산자
왼쪽 변수(lvalue)에 오른쪽 변수(값)(rvalue)를 대입

ch05/OperationEx.java 대입연산자 예시 참고

부호 연선자
단항 연산자
양수/음수의 표현 값의 부호를 변경
+ / 변수나 상수 값을 양수로 만든다 / +3
- / 변수나 상수 값을 음수로 만든다 / -3

변수에 +,-를 사용한다고 해서 변수의 값이 변하는 것은 아님
변수의 값을 변경하려면 대입연산자를 사용해야함.

ch05/OperationEx.java 부호연산자 예시 참고

산술 연산자
사칙연산에 사용되는 연산자 

+ / 두 항을 더한다 / 5+3
- / 앞에 있는 항에서 뒤에 있는 항을 뺀다 / 5-3
* / 두 항을 곱한다 / 5*3
/ / 앞에있는 항에서 뒤에 있는 항을 나누어 몫을 구한다 / 5/3
% / 앞에 있는 항에서 뒤에 있는 항을 나누어 나머지를 구한다 /5%3
우선순위는 곱하기 나누기가 더 높음

%는 나머지를 구하는 연산자 
-> 숫자 n의 나머지는 0~ n-1의 범위의 수
-> 특정 범위 안의 수를 구할 때 종종 사용

증가 감소 연산자
단항 연산자
1만큼 더하거나 1만틈 뺄 때 사용하는 연산자
항의 앞/뒤 위치에 따라 연산의 결과가 달라짐에 유의 

++ / 항의 값에 1을 더한다. / val = ++num; val = num++
-- / 항의 값에 1을 뺀다. /val = --num; val = num--

ch05/OperationEx2.java 예시 참고

논리 연산자
관계 연산자와 혼합하여 많이 사용 됨. 
연산의 겨로가가 true (참) / false(거짓)으로 반환 됨.

&& (논리 곱) / 두 항 모두 참일 경우에 결과 값이 참
|| (논리 합) / 두항 중 하나의 항만 참이면 결과값은 참임 
! (부정) / 단항 연산자로 참을 거짓으로 거짓을 참으로 변경

단락회로평가 (Short circuit evaluation)

논리 곱은 두항이 모두 true일 때만 결과가 true
-> 앞의 항이 false이면 뒤 항의 결과를 평가하지 않음

논리 합은 두 항이 모두 false일때 결과가 false 
-> 앞의 항의 true 이면 뒤 항의 결과를 평가하지 않아도 됨. 

복합 대입 연산자
대입 연산자와 다른 연산자를 함께 사용함. 
프로그램에서 자주 사용하는 연산자 

+= / 두 항의 값을 더해서 왼쪽 항에 대입 / num1 +=2; -> num1 =num1+2 와 같음
-= / 왼쪽 항에서 오른쪽 항을 빼서 그 값을 왼쪽 항에 대입 / num1-=2 -> num1 = num1 -2 와같음
*= / 두 항의 값을 곱해서 왼쪽 항에 대입 / num1 *= 2 -> num1 = num1 *2 와같음
/= / 왼쪽 항을 오른쪽 항으로 나누어 그 몫을 왼쪽 항에 대입 / num1 /= 2 -> num1 = num1/2 와같음
%= / 왼쪽 항을 오른쪽 항으로 나누어 그 나머지를 왼쪽 항에 대입 / num1 %= 2 -> num1 = num1 %2 와같음 

그 외의 비트연산자와도 같이 사용할 수 있음.
OperationEx4.java 코드 참고 

조건 연산자

삼항 연산자
조건 식의 결과가 true인 경우와 false 인 경우에 따라 다른 식이나 결과가 수행됨. 
제어문 중 조건문을 간단히 표현할 때 사용할 수 있음. 

조건식? 결과1 : 결과2 / 조건식이 참이면 결과1, 조건식이 거짓이면 결과2가 선택 / int num = (5>3)? 10:20
OperationEx4.java 코드 참고

비트 연산자
비트의 연산자는 정수에만 사용할 수 있다.
~ / 비트의 반전 (1의 보수) / a = ~a;
& / 비트 단위 AND / 1&1 1반환 그 외는 0
| / 비트 단위 OR / 0|0 0반환 그외는 1
^ / 비트 단위 XOR / 두개의 비트가 서로 다른 경우에 1을 반환
<< / 왼쪽 shift / a<<2 변수 a를 2 비트 만큼 왼쪽으로 이동
>> / 오른쪽 shift / a>>2 변수 a를 2 비트 만큼 오른쪽으로 이동
>>> / 오른쪽 shift / >> 동일한 연산 채워지는 비트가 부호와 상관없이 0임.


